{
  "Traceyi": {
    // トレース動作のフィルター設定とリスナー登録
    "Tracer": [
      {
        // 要素の名前
        "Name": "",
        // フィルター、カンマ区切りで複数設定可
        //
        // Trace    : トレース
        // Debug    : デバッグ
        // Info     : 通知
        // Warning  : 注意
        // Error    : エラー
        // Critical : 重大
        // Start    : 開始
        // Stop     : 停止
        // Actions  : Info, Warning, Error, Critical, Start, Stop
        // All      : すべて
        // None     : 無し
        "Filters": "All",
        // リスナー設定で指定した名前でリスナー登録
        "Listeners": [ "console", "file" ]
      }
    ],
    // リスナー設定
    "Listener": {
      // コンソール出力
      "Console": [
        {
          // 要素の名前
          "Name": "console",
          // 排他制御するかどうか（省略：false）
          "UseLock": false,
          // 非同期 I/O または同期 I/O のどちらを使用するか（省略：true）
          "UseAsync": true,
          // 改行文字（省略：\r\n）
          "NewLine": "\r\n",
          // エンコーディング（省略：UTF-8）
          "Encoding": "utf-8",
          // 終了待機時間（省略：-1 ms）
          "CloseTimeout": "00:00:01",
          // エラーストリームを使用するかどうか（省略：false）
          "UseErrorStream": false,
          // 出力するログのレイアウトを指定する（省略可）
          // ................................................................
          // レイアウト項目
          //
          // {tab}           : タブ
          // {newLine}       : 改行
          // {traced}        : DateTimeOffset 型
          // {action}        : TraceAction 型
          // {elapsed}       : TimeSpan 型
          // {message}       : Object 型
          // {activityId}    : Object 型
          // {scopeLabel}    : Object 型
          // {scopeId}       : String 型
          // {scopeParentId} : String 型
          // {scopeDepth}    : Int32 型
          // {threadId}      : Int32 型
          // {processId}     : Int32 型
          // {processName}   : String 型
          // {machineName}   : String 型
          // {extensions}    : IDictionary<string, object> 型
          // {@}             : TraceEventArgs 型
          //
          // 書式設定
          // ................................................................
          // 型に応じた書式設定が可能
          //
          // {dateTime:yyyy/MM/dd HH:mm:ss.fffffff}
          // {action:D}
          // {elapsed:d\\.hh\\:mm\\:ss\\.fffffff}
          //
          // カスタム書式設定
          // ................................................................
          // 項目の最大文字数の指定と文字埋めが可能
          // 標準書式設定と組み合わせての設定可能
          // [埋め文字]を指定しないときは空白（' '）が入る
          //
          // {[項目名]|[埋め文字],[最大文字数]:[文字寄せ（L:左寄せ R:右寄せ）]}
          //
          // {message|_, 20:R}
          // {threadId, 4:D4|_, 8:L}
          //
          // {@} TraceEventArgs 書式設定
          // ................................................................
          // 出力項目を指定可能（省略：all）
          //
          // {@[出力項目]}
          // {@[all]}
          // {@[action,traced,message]}
          // 
          // Action
          // Traced
          // Elapsed
          // ActivityId
          // ScopeLabel
          // ScopeId
          // ScopeParentId
          // ScopeDepth
          // ThreadId
          // ProcessId
          // ProcessName
          // MachineName
          // Message
          // Extensions
          // All
          //
          // JSON 書式設定
          // ................................................................
          // JSON 出力が可能
          //
          // {[項目名]=>json}
          // {[項目名]=>json[,indent:自動整形]}
          //
          "Layout": {
            "Format": "{traced:O}{tab}{action}{tab}{elapsed:d\\.hh\\:mm\\:ss\\.fffffff}{tab}{scopeLabel}{tab}{activityId}{tab}{threadId}{tab}{processId}{tab}{processName}{tab}{machineName}{tab}{message}"
          },
          // 文字色設定（省略可）
          "coloring": {
            // 着色開始位置（省略：0）
            "start": 0,
            // 着色文字数（省略：1）
            "length": 10
          }
        }
      ],
      // ファイル出力
      "File": [
        {
          "Name": "file",
          // 出力先パス、レイアウト指定可能（省略：[ApplicationName].log）
          //
          // {dateTime}    : DateTimeOffset 型
          // {threadId}    : Int32 型
          // {processId}   : Int32 型
          // {processName} : String 型
          // {machineName} : String 型
          //
          "Path": "Test.log",
          "UseLock": false,
          "UseAsync": true,
          // 複数プロセス（またはリスナー）から同じファイルへ書き込み場合に排他制御するかどうか（省略：false）
          "UseMutex": false,
          // ファイルを開いたままにするかどうか
          // 複数プロセス（またはリスナー）から同一ファイルへ書き込む場合に開いたままだと MaxLength 処理ができないため
          // MaxLength > 0 かつ UseMutex = true の場合は false に強制設定
          "KeepFilesOpen": true,
          // ファイルの最大バイトサイズ（省略：0）
          // 0 以下の場合は最大長を無視
          // このサイズを超えるときに新しいファイルを作成する
          "MaxLength": 0,
          // 最大アーカイブ数（省略：10）
          // 0 以下の場合はアーカイブしない
          // アーカイブファイルには連番が振られる
          "MaxArchiveCount": 10,
          "CloseTimeout": "00:00:01",
          "NewLine": "\r\n",
          "Encoding": "utf-8",
          "Layout": {
            "Format": "{traced}{tab}{message}"
          }
        }
      ]
    }
  }
}
