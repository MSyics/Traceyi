<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <!--
    msyics/traceyi 構成セクションの追加
  -->
  <configSections>
    <sectionGroup name="msyics">
      <section name="traceyi" type="MSyics.Traceyi.TraceyiConfigurationSection, MSyics.Traceyi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
    </sectionGroup>
  </configSections>

  <msyics>
    <traceyi>
      <!--
        tracer 要素を構成する
      -->
      <tracers>
        <!-- 
          Traceable.Get() で取得する tracer 要素
          ................................................................
          filter          : filters 要素で設定した filter 要素の名前を指定（省略：Actions）
        -->
        <default filter="Filter_All">
          <!--
            tracer 要素 に追加する log 要素 と filter 要素 を指定する。
            ................................................................
            log     : logs 要素で設定した log 要素の名前を指定
            filter  : filters 要素で設定した filter 要素の名前を指定（省略：Actions）
          -->
          <attach log="Log_Console" filter="Filter_All"/>
        </default>
        <!--
          Traceable.Get("[tracerName]") で取得する tracer 要素
        -->
        <tracer name="tracerName">
          <attach log="Log_Console" filter="Filter_Operation"/>
          <attach log="Log_File" filter="Filter_All"/>
        </tracer>
      </tracers>
      <!--
        filter 要素を構成する
      -->
      <filters>
        <!--
          トレースする動作のフィルターを設定する。複数指定可。
          ................................................................
          name  : filter 要素の名前
          value : {TraceFilters}
                  None     　: 無し
                  Debug  　  : デバッグ
                  Info   　  : 通知
                  Start  　  : 開始
                  Stop   　  : 停止
                  Warning　  : 注意
                  Error  　  : エラー
                  Calling    : 実行中の操作
                  Elapsed    : 経過時間
                  Actions    : Debug, Info, Start, Stop, Warning, Error
                  All        : すべて
        -->
        <add name="Filter_All" value="All"/>
        <add name="Filter_Operation" value="Start,Stop"/>
      </filters>
      <!--
        log 要素を構成する
      -->
      <logs>
        <!--
          コンソールに出力する
          ................................................................
          name            : 要素の名前
          useGlobalLock   : グローバルロックをかけるかどうか（省略：false）
          newLine         : 改行文字（省略：\r\n）
          encoding        : エンコーディング（省略：UTF-8）
          useErrorStream  : エラーストリームを使用するかどうか（省略：false）
        -->
        <console name="Log_Console" useGlobalLock="false" newLine="\r\n" encoding="shift-jis" useErrorStream="false">
          <!--
            出力するログのレイアウトを指定する（省略可）
            ................................................................
            レイアウト項目
            
            {tab}         : タブ
            {newLine}     : 改行
            {dateTime}    : DateTime 型
            {action}      : TraceAction 型
            {message}     : Object 型
            {activityId}  : Object 型
            {operationId} : Object 型
            {class}       : Type 型
            {member}      : MemberInfo 型
            {threadId}    : Int32 型
            {processId}   : Int32 型
            {processName} : String 型
            {machineName} : String 型
            
            書式設定
            ................................................................
            型に応じた書式設定が可能
            
            {dateTime:yyyy/MM/dd HH:mm:ss.ffff}
            {action:D}
            
            カスタム書式設定
            ................................................................
            項目の最大文字数の指定と文字埋めが可能
            標準書式設定と組み合わせての設定可能
            [埋め文字]を指定しないときは空白（' '）が入る
              
            {[項目名]|[埋め文字],[最大文字数]:[文字寄せ（L:左寄せ R:右寄せ）]}
              
            {message|_, 20:R}
            {threadId, 4:D4|_, 8:L}
            
          -->
          <!--<layout format="{datetime:yyyy/MM/dd HH:mm:ss.ffff}"/>-->
        </console>
        <!--
          ファイルに出力する
          ................................................................
          path  : パスを指定する。（省略：[ApplicationName].log）
        -->
        <file name="Log_File" useGlobalLock="false" newLine="\r\n" encoding="shift-jis" path="log\hoge.log">
          <layout/>
        </file>
        <!--
          指定した条件で新しいファイルに出力する
          ................................................................
          pathLayout  : パスを指定する。レイアウト指定可能（省略：[ApplicationName].log）
            
            {dateTime}    : DateTime 型
            {threadId}    : Int32 型
            {processId}   : Int32 型
            {processName} : String 型
            {machineName} : String 型
            
          maxLength   : ファイルの最大バイトサイズ。
                        このサイズを超えるときに新しいファイルが作成される。
                        作成済みのファイルには連番がふられる。
                        （省略：0）
          leaveFiles  : ファイルの最大バイト数を超えたファイルを残すかどうか
        -->
        <rotateFile name="Log_Rotate" useGlobalLock="false" newLine="\r\n" encoding="shift-jis" pathLayout="log\{processId|0,4:R}{threadId|0,4:R}{dateTime:yyyyMMddHHmm}.log" maxLength="0" leaveFiles="true">
          <layout/>
        </rotateFile>
        <!--
          イベントログに出力する。
          ソースとログは事前に準備が必要。
          EventLog.Install(), EventLog.Uninstall() が利用できる。
          ................................................................
          sourceName  : ソース名
          logName     : ログ名
          machineName : マシン名（省略：ローカルマシン名）
        -->
        <event name="Log_Event" useGlobalLock="false" sourceName="hoge_source" logName="hoge_log" machineName="">
          <layout/>
        </event>

        <!--
          カスタム Log クラスを使用する場合に設定する。
        
        <resolvers>
            
            name  : 要素の名前
            type  : カスタム Log クラスの型情報
            
          <add name="myCostomLog" type="MyNamespace.CustomLogElement, MyNamespace"/>
        </resolvers>
        
        <myCostomLog name="Log_Custom" />
        -->
      </logs>
    </traceyi>
  </msyics>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
  </startup>
</configuration>